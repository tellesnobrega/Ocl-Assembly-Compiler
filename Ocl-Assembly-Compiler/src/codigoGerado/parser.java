
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 14 10:36:35 BRT 2012
//----------------------------------------------------

package codigoGerado;

import java_cup.runtime.*;
import gerador.semantico.*;
import gerador.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 14 10:36:35 BRT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\004\010\000\002\004\007\000\002\011\007" +
    "\000\002\011\002\000\002\010\003\000\002\010\002\000" +
    "\002\005\004\000\002\006\003\000\002\012\012\000\002" +
    "\012\010\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\003\000\002\022\003\000\002\022\005" +
    "\000\002\020\006\000\002\007\003\000\002\007\003\000" +
    "\002\003\003\000\002\023\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\006\000\002\014\002" +
    "\000\002\043\007\000\002\043\002\000\002\026\003\000" +
    "\002\026\005\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\027\003\000\002\027" +
    "\005\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\030\004\000\002\031\005\000\002\031\002\000\002" +
    "\045\003\000\002\045\003\000\002\024\004\000\002\025" +
    "\005\000\002\025\002\000\002\035\004\000\002\035\003" +
    "\000\002\051\003\000\002\051\003\000\002\050\003\000" +
    "\002\050\003\000\002\065\002\000\002\036\005\000\002" +
    "\034\005\000\002\034\002\000\002\047\003\000\002\047" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\033\003\000\002\062\006\000" +
    "\002\040\004\000\002\040\002\000\002\042\005\000\002" +
    "\042\002\000\002\041\004\000\002\056\004\000\002\056" +
    "\002\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\057\004\000\002\066\002\000\002\060\004\000" +
    "\002\060\002\000\002\037\004\000\002\053\004\000\002" +
    "\054\005\000\002\054\002\000\002\052\005\000\002\052" +
    "\004\000\002\055\004\000\002\055\002\000\002\032\011" +
    "\000\002\064\003\000\002\064\003\000\002\063\003\000" +
    "\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\002\uffff\042\007\001\002\000\004\002" +
    "\242\001\002\000\006\032\073\033\074\001\002\000\006" +
    "\002\uffff\042\007\001\002\000\004\053\012\001\002\000" +
    "\006\032\ufff8\033\ufff8\001\002\000\006\032\ufff7\033\ufff7" +
    "\001\002\000\004\041\013\001\002\000\040\010\016\012" +
    "\015\013\027\014\020\015\023\016\032\017\017\020\022" +
    "\021\031\022\021\023\014\024\026\025\024\044\025\053" +
    "\033\001\002\000\004\005\uffe2\001\002\000\004\005\uffd7" +
    "\001\002\000\004\005\uffd8\001\002\000\004\005\uffdf\001" +
    "\002\000\004\005\uffe4\001\002\000\004\005\uffe3\001\002" +
    "\000\004\005\uffe0\001\002\000\004\005\uffde\001\002\000" +
    "\004\005\uffdd\001\002\000\004\005\uffda\001\002\000\004" +
    "\005\uffdc\001\002\000\004\005\uffd9\001\002\000\004\005" +
    "\034\001\002\000\004\005\uffdb\001\002\000\004\005\uffe1" +
    "\001\002\000\004\005\uffe5\001\002\000\006\004\uffd5\053" +
    "\035\001\002\000\004\040\061\001\002\000\004\004\037" +
    "\001\002\000\010\032\ufff5\033\ufff5\040\040\001\002\000" +
    "\014\026\050\027\041\030\042\031\051\053\053\001\002" +
    "\000\006\005\uffe8\007\uffe8\001\002\000\006\005\uffe7\007" +
    "\uffe7\001\002\000\012\004\ufff1\032\ufff1\033\ufff1\043\ufff1" +
    "\001\002\000\006\032\ufff4\033\ufff4\001\002\000\004\005" +
    "\056\001\002\000\012\004\ufff3\032\ufff3\033\ufff3\043\ufff3" +
    "\001\002\000\006\032\ufff6\033\ufff6\001\002\000\006\005" +
    "\uffe9\007\uffe9\001\002\000\006\005\uffe6\007\uffe6\001\002" +
    "\000\012\004\ufff2\032\ufff2\033\ufff2\043\ufff2\001\002\000" +
    "\074\002\ufff0\004\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\032\ufff0\033\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\041\054\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000\004\053\053" +
    "\001\002\000\072\002\uffef\004\uffef\005\uffef\006\uffef\010" +
    "\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\032" +
    "\uffef\033\uffef\035\uffef\036\uffef\037\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\uffef\001\002\000\004\053" +
    "\053\001\002\000\004\004\060\001\002\000\012\004\uffee" +
    "\032\uffee\033\uffee\043\uffee\001\002\000\014\026\050\027" +
    "\041\030\042\031\051\053\053\001\002\000\006\004\uffd3" +
    "\043\063\001\002\000\004\053\065\001\002\000\004\004" +
    "\uffd6\001\002\000\004\040\066\001\002\000\014\026\050" +
    "\027\041\030\042\031\051\053\053\001\002\000\006\004" +
    "\uffd3\043\063\001\002\000\004\004\uffd4\001\002\000\004" +
    "\002\001\001\002\000\006\040\075\053\076\001\002\000" +
    "\006\040\uffed\053\uffed\001\002\000\006\040\uffec\053\uffec" +
    "\001\002\000\036\005\111\013\103\023\123\026\050\027" +
    "\041\030\042\031\051\034\107\053\053\054\116\055\125" +
    "\056\132\057\106\060\122\001\002\000\004\040\077\001" +
    "\002\000\036\005\111\013\103\023\123\026\050\027\041" +
    "\030\042\031\051\034\107\053\053\054\116\055\125\056" +
    "\132\057\106\060\122\001\002\000\064\002\uffbb\004\uffbb" +
    "\006\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\047\uffbb\001\002\000\070\002\uffa2" +
    "\004\uffa2\006\uffa2\010\uffa2\011\uffa2\012\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\032\uffa2\033\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\001\002\000\070\002\uffb6\004\uffb6\006\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\032\uffb6\033" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\001\002\000\032\005\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\034\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000\030\002" +
    "\uffea\004\uffea\006\uffea\032\uffea\033\uffea\035\uffea\036\uffea" +
    "\037\uffea\042\uffea\043\uffea\047\uffea\001\002\000\004\007" +
    "\217\001\002\000\070\002\uff93\004\uff93\006\uff93\010\uff93" +
    "\011\uff93\012\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\032\uff93" +
    "\033\uff93\035\uff93\036\uff93\037\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\001\002\000\036\005\111" +
    "\013\103\023\123\026\050\027\041\030\042\031\051\034" +
    "\107\053\053\054\116\055\125\056\132\057\106\060\122" +
    "\001\002\000\054\002\uffcc\004\uffcc\006\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\014\201\015\203\016\202\017\205\020\204" +
    "\021\206\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\047\uffcc\001\002\000\036\005\111" +
    "\013\103\023\123\026\050\027\041\030\042\031\051\034" +
    "\107\053\053\054\116\055\125\056\132\057\106\060\122" +
    "\001\002\000\064\002\uffbd\004\uffbd\006\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\032\uffbd\033" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\047\uffbd\001\002\000\070\002\uffae\004\uffae\006\uffae\010" +
    "\uffae\011\uffae\012\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\032" +
    "\uffae\033\uffae\035\uffae\036\uffae\037\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\001\002\000\060\002" +
    "\uffc2\004\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\047\uffc2\001\002\000\040\002\uffd2\004" +
    "\uffd2\006\uffd2\010\163\011\162\012\161\032\uffd2\033\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\042\uffd2\043\uffd2\044\160\047" +
    "\uffd2\001\002\000\070\002\uffa3\004\uffa3\006\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\032\uffa3" +
    "\033\uffa3\035\uffa3\036\uffa3\037\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\001\002\000\012\002\uffeb" +
    "\032\uffeb\033\uffeb\042\uffeb\001\002\000\032\005\111\026" +
    "\050\027\041\030\042\031\051\034\107\053\053\054\116" +
    "\055\125\056\132\057\106\060\122\001\002\000\070\002" +
    "\uffac\004\uffac\006\uffac\010\uffac\011\uffac\012\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\032\uffac\033\uffac\035\uffac\036\uffac" +
    "\037\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\001\002\000\070\002\uff92\004\uff92\006\uff92\010\uff92" +
    "\011\uff92\012\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\032\uff92" +
    "\033\uff92\035\uff92\036\uff92\037\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\001\002\000\032\005\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\034\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001\002\000\070" +
    "\002\uffaf\004\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\032\uffaf\033\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\001\002\000\070\002\uff90\004\uff90\006\uff90\010" +
    "\uff90\011\uff90\012\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\032" +
    "\uff90\033\uff90\035\uff90\036\uff90\037\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\001\002\000\072\002" +
    "\uff9d\004\uff9d\005\uff9f\006\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\032\uff9d\033\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\001\002\000\070\002\uffb0\004\uffb0\006\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\001\002\000\070" +
    "\002\uffa1\004\uffa1\006\uffa1\010\uffa1\011\uffa1\012\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\032\uffa1\033\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\001\002\000\012\002\ufffb\032\073\033\074\042" +
    "\ufffb\001\002\000\070\002\uff91\004\uff91\006\uff91\010\uff91" +
    "\011\uff91\012\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\032\uff91" +
    "\033\uff91\035\uff91\036\uff91\037\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\001\002\000\006\002\ufffe" +
    "\042\ufffe\001\002\000\006\040\ufff9\053\136\001\002\000" +
    "\004\040\137\001\002\000\004\040\ufffa\001\002\000\036" +
    "\005\111\013\103\023\123\026\050\027\041\030\042\031" +
    "\051\034\107\053\053\054\116\055\125\056\132\057\106" +
    "\060\122\001\002\000\012\002\ufffb\032\073\033\074\042" +
    "\ufffb\001\002\000\006\002\ufffc\042\ufffc\001\002\000\004" +
    "\005\145\001\002\000\070\002\uffa0\004\uffa0\006\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\032" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\001\002\000\070\002" +
    "\uff9e\004\uff9e\006\uff9e\010\uff9e\011\uff9e\012\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\025\uff9e\032\uff9e\033\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\001\002\000\040\004\147\005\111\013\103\023\123" +
    "\026\050\027\041\030\042\031\051\034\107\053\053\054" +
    "\116\055\125\056\132\057\106\060\122\001\002\000\004" +
    "\004\155\001\002\000\070\002\uff97\004\uff97\006\uff97\010" +
    "\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\032" +
    "\uff97\033\uff97\035\uff97\036\uff97\037\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\047\uff97\001\002\000\006\004" +
    "\uff99\043\151\001\002\000\036\005\111\013\103\023\123" +
    "\026\050\027\041\030\042\031\051\034\107\053\053\054" +
    "\116\055\125\056\132\057\106\060\122\001\002\000\004" +
    "\004\uff9b\001\002\000\006\004\uff99\043\151\001\002\000" +
    "\004\004\uff9a\001\002\000\070\002\uff98\004\uff98\006\uff98" +
    "\010\uff98\011\uff98\012\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\032\uff98\033\uff98\035\uff98\036\uff98\037\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\001\002\000\064" +
    "\002\uffbc\004\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\032\uffbc\033\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\042\uffbc\043\uffbc\044\uffbc\047\uffbc\001\002" +
    "\000\036\005\111\013\103\023\123\026\050\027\041\030" +
    "\042\031\051\034\107\053\053\054\116\055\125\056\132" +
    "\057\106\060\122\001\002\000\036\005\uffcd\013\uffcd\023" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000" +
    "\036\005\uffd0\013\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\034\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\001\002\000\036\005\uffcf\013\uffcf\023\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\036" +
    "\005\uffce\013\uffce\023\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\034\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\001\002\000\030\002\uffd1\004\uffd1\006\uffd1\032" +
    "\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\042\uffd1\043\uffd1" +
    "\047\uffd1\001\002\000\060\002\uffc4\004\uffc4\006\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\166\023\167\032\uffc4\033\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\042\uffc4\043\uffc4\044\uffc4\047\uffc4" +
    "\001\002\000\036\005\uffc1\013\uffc1\023\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\034\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\001\002\000\036\005\uffc0\013" +
    "\uffc0\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\034\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\001" +
    "\002\000\036\005\111\013\103\023\123\026\050\027\041" +
    "\030\042\031\051\034\107\053\053\054\116\055\125\056" +
    "\132\057\106\060\122\001\002\000\060\002\uffc3\004\uffc3" +
    "\006\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\032\uffc3" +
    "\033\uffc3\035\uffc3\036\uffc3\037\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\047\uffc3\001\002\000\064\002\uffbf\004\uffbf\006\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\175\025\174" +
    "\032\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\047\uffbf\001\002\000\036\005\111\013\103" +
    "\023\123\026\050\027\041\030\042\031\051\034\107\053" +
    "\053\054\116\055\125\056\132\057\106\060\122\001\002" +
    "\000\036\005\uffb7\013\uffb7\023\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\034\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\036\005\uffb8\013\uffb8\023" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002\000" +
    "\064\002\uffbe\004\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\032\uffbe\033\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\042\uffbe\043\uffbe\044\uffbe\047\uffbe\001" +
    "\002\000\004\004\200\001\002\000\070\002\uffad\004\uffad" +
    "\006\uffad\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\001\002" +
    "\000\036\005\uffca\013\uffca\023\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\034\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\001\002\000\036\005\uffc8\013\uffc8\023" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\034\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\001\002\000" +
    "\036\005\uffc9\013\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\034\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\001\002\000\036\005\uffc6\013\uffc6\023\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\034\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000\036" +
    "\005\uffc7\013\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\034\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\001\002\000\036\005\uffc5\013\uffc5\023\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\034\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000\036\005" +
    "\111\013\103\023\123\026\050\027\041\030\042\031\051" +
    "\034\107\053\053\054\116\055\125\056\132\057\106\060" +
    "\122\001\002\000\040\002\uffcb\004\uffcb\006\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\047\uffcb\001\002\000\004" +
    "\035\212\001\002\000\036\005\111\013\103\023\123\026" +
    "\050\027\041\030\042\031\051\034\107\053\053\054\116" +
    "\055\125\056\132\057\106\060\122\001\002\000\004\036" +
    "\214\001\002\000\036\005\111\013\103\023\123\026\050" +
    "\027\041\030\042\031\051\034\107\053\053\054\116\055" +
    "\125\056\132\057\106\060\122\001\002\000\004\037\216" +
    "\001\002\000\070\002\uff94\004\uff94\006\uff94\010\uff94\011" +
    "\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\032\uff94\033" +
    "\uff94\035\uff94\036\uff94\037\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\001\002\000\040\005\111\006" +
    "\uffa9\013\103\023\123\026\050\027\041\030\042\031\051" +
    "\034\107\053\053\054\116\055\125\056\132\057\106\060" +
    "\122\001\002\000\010\006\uffa4\043\uffa4\047\230\001\002" +
    "\000\006\006\uffa7\043\uffa7\001\002\000\004\006\223\001" +
    "\002\000\070\002\uffab\004\uffab\006\uffab\010\uffab\011\uffab" +
    "\012\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\032\uffab\033\uffab" +
    "\035\uffab\036\uffab\037\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\001\002\000\006\006\uffaa\043\225" +
    "\001\002\000\036\005\111\013\103\023\123\026\050\027" +
    "\041\030\042\031\051\034\107\053\053\054\116\055\125" +
    "\056\132\057\106\060\122\001\002\000\006\006\uffa8\043" +
    "\uffa8\001\002\000\006\006\uffa6\043\uffa6\001\002\000\036" +
    "\005\111\013\103\023\123\026\050\027\041\030\042\031" +
    "\051\034\107\053\053\054\116\055\125\056\132\057\106" +
    "\060\122\001\002\000\006\006\uffa5\043\uffa5\001\002\000" +
    "\070\002\uffb3\004\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\032\uffb3\033\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\001\002\000\070\002\uffb5\004\uffb5\006\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\032\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\236\046\235\047\uffb5\001\002\000\004" +
    "\053\053\001\002\000\004\053\uffb1\001\002\000\004\053" +
    "\uffb2\001\002\000\070\002\uffb4\004\uffb4\006\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\032\uffb4" +
    "\033\uffb4\035\uffb4\036\uffb4\037\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\001\002\000\012\002\ufffb" +
    "\032\073\033\074\042\ufffb\001\002\000\006\002\ufffd\042" +
    "\ufffd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\010\002\003\004\005\005\004\001\001\000" +
    "\002\001\001\000\004\007\071\001\001\000\010\002\070" +
    "\004\005\005\004\001\001\000\006\006\007\012\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\046\016\043\017\045\020\051\021\044\022\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\054\001\001\000\002" +
    "\001\001\000\006\017\056\022\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\061\017\045\020\051" +
    "\021\044\022\042\001\001\000\004\043\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\066\017\045\020\051\021\044\022\042\001\001\000" +
    "\004\043\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\237\021\104\022\125\023\116\024\113\026\103" +
    "\027\114\030\107\032\120\033\101\035\111\036\077\051" +
    "\117\057\112\061\123\062\126\063\100\064\127\001\001" +
    "\000\002\001\001\000\046\003\130\021\104\022\125\023" +
    "\116\024\113\026\103\027\114\030\107\032\120\033\101" +
    "\035\111\036\077\051\117\057\112\061\123\062\126\063" +
    "\100\064\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\021\104" +
    "\022\125\023\210\024\113\026\103\027\114\030\107\032" +
    "\120\033\101\035\111\036\077\051\117\057\112\061\123" +
    "\062\126\063\100\064\127\001\001\000\004\044\206\001" +
    "\001\000\044\021\104\022\125\023\176\024\113\026\103" +
    "\027\114\030\107\032\120\033\101\035\111\036\077\051" +
    "\117\057\112\061\123\062\126\063\100\064\127\001\001" +
    "\000\004\025\171\001\001\000\002\001\001\000\004\031" +
    "\164\001\001\000\004\046\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\021\104\022\125\032\120\033" +
    "\101\036\155\057\112\061\123\062\126\063\100\064\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\060\142" +
    "\066\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\133\011\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\137\021\104\022\125\023\116" +
    "\024\113\026\103\027\114\030\107\032\120\033\101\035" +
    "\111\036\077\051\117\057\112\061\123\062\126\063\100" +
    "\064\127\001\001\000\006\007\133\011\140\001\001\000" +
    "\002\001\001\000\004\052\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\021\104\022\125\023\147\024" +
    "\113\026\103\027\114\030\107\032\120\033\101\035\111" +
    "\036\077\051\117\053\145\057\112\061\123\062\126\063" +
    "\100\064\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\151\001\001\000\044\021\104\022\125\023" +
    "\152\024\113\026\103\027\114\030\107\032\120\033\101" +
    "\035\111\036\077\051\117\057\112\061\123\062\126\063" +
    "\100\064\127\001\001\000\002\001\001\000\004\054\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\021\104\022\125\024\113\026\163\027\114" +
    "\030\107\032\120\033\101\035\111\036\077\051\117\057" +
    "\112\061\123\062\126\063\100\064\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\021\104\022\125\024" +
    "\170\032\120\033\101\035\111\036\077\051\117\057\112" +
    "\061\123\062\126\063\100\064\127\001\001\000\002\001" +
    "\001\000\004\050\172\001\001\000\032\021\104\022\125" +
    "\032\120\033\101\035\175\036\077\051\117\057\112\061" +
    "\123\062\126\063\100\064\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\021\104\022\125\024\113\030\207\032\120" +
    "\033\101\035\111\036\077\051\117\057\112\061\123\062" +
    "\126\063\100\064\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\021\104\022\125\023\212\024\113\026" +
    "\103\027\114\030\107\032\120\033\101\035\111\036\077" +
    "\051\117\057\112\061\123\062\126\063\100\064\127\001" +
    "\001\000\002\001\001\000\044\021\104\022\125\023\214" +
    "\024\113\026\103\027\114\030\107\032\120\033\101\035" +
    "\111\036\077\051\117\057\112\061\123\062\126\063\100" +
    "\064\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\021\104\022\125\023\217\024\113\026\103\027\114" +
    "\030\107\032\120\033\101\035\111\036\077\040\221\041" +
    "\220\051\117\057\112\061\123\062\126\063\100\064\127" +
    "\001\001\000\004\056\226\001\001\000\004\042\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\021\104\022\125\023\217\024\113\026\103\027" +
    "\114\030\107\032\120\033\101\035\111\036\077\041\225" +
    "\051\117\057\112\061\123\062\126\063\100\064\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\021\104" +
    "\022\125\023\230\024\113\026\103\027\114\030\107\032" +
    "\120\033\101\035\111\036\077\051\117\057\112\061\123" +
    "\062\126\063\100\064\127\001\001\000\002\001\001\000" +
    "\004\034\232\001\001\000\004\047\233\001\001\000\006" +
    "\022\125\057\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\133\011\240\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private AnalisadorSemantico atual = AnalisadorSemantico.getInstance();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // number ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberClass(i, "Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // number ::= DOUBLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NumberClass(d, "Double"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // boolean ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanClass("False"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // boolean ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanClass("True"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ifExpression ::= IF expression THEN expression ELSE expression ENDIF 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfExpressionClass(exp1,exp2,exp3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // simpleTypeSpecifierOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpecifierOpt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // simpleTypeSpecifierOpt ::= COLON simpleTypeSpecifier 
            {
              Object RESULT =null;
		int sTypeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sTypeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sTypeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleTypeSpecifierOptClass(sTypeSpec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpecifierOpt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // propertyCallParameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // propertyCallParameters ::= LPAREN actualParameterList RPAREN 
            {
              Object RESULT =null;
		int aplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object apl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PropertyCallParametersClass(apl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // actualParameterListOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualParameterListOpt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // actualParameterListOpt ::= COMMA expression actualParameterListOpt 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int actualParamListOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actualParamListOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object actualParamListOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActualParameterListOptClass(exp,actualParamListOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualParameterListOpt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // actualParameterList ::= expression actualParameterListOpt 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int actualParamListOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actualParamListOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object actualParamListOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActualParameterListClass(exp,actualParamListOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualParameterList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // timeExpression ::= AT PRE 
            {
              Object RESULT =null;
		 RESULT = new TimeExpressionClass(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // propertyOptCall ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propertyOptCall",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // propertyOptCall ::= NT$1 propertyCallParameters 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pcp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 atual.retrocedeContexto();RESULT = new PropertyOptCallClass(pcp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propertyOptCall",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$1 ::= 
            {
              Object RESULT =null;
 atual.setContexto(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // propertyCall ::= pathName propertyOptCall 
            {
              Object RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object poc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PropertyCallClass(pnleft, pnright, pn, poc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propertyCall",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= boolean 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralClass(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralClass(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralClass(s, "string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // collectionItemExpressionOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionItemExpressionOpt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // collectionItemExpressionOpt ::= DOUBLEDOT expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionItemExpressionOptClass(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionItemExpressionOpt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // collectionItem ::= expression collectionItemExpressionOpt 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int colItemExpOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colItemExpOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object colItemExpOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionItemClass(exp,colItemExpOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionItem",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // collectionItemOptTwo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionItemOptTwo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // collectionItemOptTwo ::= collectionItemOptTwo COMMA collectionItem 
            {
              Object RESULT =null;
		int colItemOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colItemOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object colItemOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colItemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colItemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object colItem = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionItemOptTwoClass(colItemOpt,colItem); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionItemOptTwo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // collectionItemOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionItemOpt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // collectionItemOpt ::= collectionItem collectionItemOptTwo 
            {
              Object RESULT =null;
		int colItem1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colItem1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colItem1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int colItemOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colItemOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object colItemOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionItemClass(colItem1,colItemOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionItemOpt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literalCollection ::= collectionKind LBRACKET collectionItemOpt RBRACKET 
            {
              Object RESULT =null;
		int colKindleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colKindright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object colKind = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colItemOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colItemOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colItemOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LiteralCollectionClass(colKind,colItemOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literalCollection",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primaryExpression ::= ifExpression 
            {
              Object RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpressionClass(ifExpleft,ifExpright,ifExp,"IfExpressionClass"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primaryExpression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrimaryExpressionClass(expleft,expright, exp,"expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primaryExpression ::= propertyCall 
            {
              Object RESULT =null;
		int propCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int propCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object propCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpressionClass(propCallleft, propCallright, propCall,"propertyCall"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primaryExpression ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpressionClass(litleft,litright,lit,"literal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primaryExpression ::= literalCollection 
            {
              Object RESULT =null;
		int litColleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litColright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object litCol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpressionClass(litColleft, litColright, litCol,"literalCollectionClass"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operator ::= ARROW 
            {
              Object RESULT =null;
		int arrowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrowright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arrow = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 atual.empilhaFluxo(); RESULT = new OperatorClass("arrow"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operator ::= DOT 
            {
              Object RESULT =null;
		int dotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorClass("dot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // postfixExpressionOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpressionOpt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // postfixExpressionOpt ::= postfixExpressionOpt operator propertyCall 
            {
              Object RESULT =null;
		int postExpOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int postExpOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object postExpOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int proCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object proCall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 atual.setContexto(proCallleft, proCallright, proCall);  RESULT = new PostFixExpressionOptClass(postExpOpt,op,proCall); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpressionOpt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // postfixExpression ::= primaryExpression NT$0 postfixExpressionOpt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int priExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int priExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object priExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int postExpOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int postExpOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object postExpOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PostfixExpressionClass(priExp,postExpOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$0 ::= 
            {
              Object RESULT =null;
		int priExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int priExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object priExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 atual.setContexto(priExpleft, priExpright,priExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiplyOperator ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplyOperatorClass("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplyOperator",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multiplyOperator ::= TIMES 
            {
              Object RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplyOperatorClass("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplyOperator",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unaryOperator ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOperatorClass("not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOperator",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unaryOperator ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOperatorClass("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOperator",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unaryExpression ::= postfixExpression 
            {
              Object RESULT =null;
		int postExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int postExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object postExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpressionClass(postExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unaryExpression ::= unaryOperator postfixExpression 
            {
              Object RESULT =null;
		int uOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object uOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int postExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int postExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object postExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpressionClass(uOpleft,uOpright, uOp,postExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // multiplicativeExpressionOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpressionOpt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // multiplicativeExpressionOpt ::= multiplicativeExpressionOpt multiplyOperator unaryExpression 
            {
              Object RESULT =null;
		int multExpOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multExpOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object multExpOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object uExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplicativeExpressionOptClass(multExpOpt,multOp,uExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpressionOpt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // multiplicativeExpression ::= unaryExpression multiplicativeExpressionOpt 
            {
              Object RESULT =null;
		int uExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object uExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multExpOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multExpOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object multExpOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplicativeExpressionClass(uExpleft, uExpright, uExp,multExpOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // addOperator ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOperatorClass("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOperator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // addOperator ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOperatorClass("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOperator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // additiveExpressionOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpressionOpt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // additiveExpressionOpt ::= additiveExpressionOpt addOperator multiplicativeExpression 
            {
              Object RESULT =null;
		int addExpOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addExpOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object addExpOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int addOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object multExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AdditiveExpressionOptClass(addExpOptleft, addExpOptright, addExpOpt,addOp,multExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpressionOpt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // additiveExpression ::= multiplicativeExpression additiveExpressionOpt 
            {
              Object RESULT =null;
		int multExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addExpOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int addExpOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object addExpOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AdditiveExpressionClass(multExp,addExpOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relationalOperator ::= NE 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalOperatorClass("!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relationalOperator ::= LE 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalOperatorClass("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relationalOperator ::= GE 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalOperatorClass(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relationalOperator ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalOperatorClass("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relationalOperator ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalOperatorClass(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relationalOperator ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalOperatorClass("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relationalExpression ::= additiveExpression relationalOperator additiveExpression 
            {
              Object RESULT =null;
		int addExp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addExp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object addExp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int relOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addExp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int addExp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object addExp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalExpressionClass(addExp1left,addExp1right,addExp1,relOp,addExp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relationalExpression ::= additiveExpression 
            {
              Object RESULT =null;
		int addExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int addExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object addExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationalExpressionClass(addExpleft,addExpright, addExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logicalOperator ::= IMPLIES 
            {
              Object RESULT =null;
		int impliesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int impliesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object implies = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalOperatorClass("implies"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logicalOperator ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalOperatorClass("^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logicalOperator ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalOperatorClass("or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logicalOperator ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalOperatorClass("and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logicalExpression ::= relationalExpression logicalOperator logicalExpression 
            {
              Object RESULT =null;
		int relExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int relExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object relExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalExpressionClass(relExp,logOp,logExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logicalExpression ::= relationalExpression 
            {
              Object RESULT =null;
		int relExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object relExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalExpressionClass(relExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paramOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramOpt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramOpt ::= COMMA NAME COLON typeSpecifier paramOpt 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object paramOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamOptClass(name,typeSpec,paramOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramOpt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formalParameterList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formalParameterList ::= NAME COLON typeSpecifier paramOpt 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object paramOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormalParameterListClass(name,typeSpec,paramOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operationName ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operationName ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operationName ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operationName ::= IMPLIES 
            {
              Object RESULT =null;
		int impliesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int impliesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object implies = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("implies"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operationName ::= NE 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operationName ::= TIMES 
            {
              Object RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operationName ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operationName ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operationName ::= GE 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operationName ::= LE 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operationName ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operationName ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operationName ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operationName ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operationName ::= NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationNameClass(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationName",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // collectionKind ::= COLLECTION 
            {
              Object RESULT =null;
		int collectionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int collectionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object collection = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionKindClass("Collection"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // collectionKind ::= SEQUENCE 
            {
              Object RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sequence = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionKindClass("Sequence"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // collectionKind ::= SET 
            {
              Object RESULT =null;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object set = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionKindClass("Set"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // collectionKind ::= BAG 
            {
              Object RESULT =null;
		int bagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bag = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CollectionKindClass("Bag"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= logicalExpression 
            {
              Object RESULT =null;
		int logExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressionClass(logExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // oclExpression ::= expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OclExpressionClass(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oclExpression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stereotype ::= POST 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StereotypeClass("pos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stereotype",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stereotype ::= PRE 
            {
              Object RESULT =null;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StereotypeClass("pre"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stereotype",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // collectionType ::= collectionKind LPAREN simpleTypeSpecifier RPAREN 
            {
              Object RESULT =null;
		int colKindleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colKindright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object colKind = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sTypeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sTypeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sTypeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CollectionTypeClass(colKind,sTypeSpec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionType",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pathName ::= NAME DOUBLECOLON pathName 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pathNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pathNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pathName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PathNameClass(name, dc,pathName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathName",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pathName ::= NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PathNameClass(nameleft, nameright,name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathName",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simpleTypeSpecifier ::= pathName 
            {
              Object RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleTypeSpecifierClass(pn); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpecifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typeSpecifier ::= collectionType 
            {
              Object RESULT =null;
		int colTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object colType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeSpecifierClass(colTypeleft, colTyperight, colType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typeSpecifier ::= simpleTypeSpecifier 
            {
              Object RESULT =null;
		int sTypeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sTypeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sTypeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeSpecifierClass(sTypeSpecleft, sTypeSpecright, sTypeSpec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // returnType ::= typeSpecifier 
            {
              Object RESULT =null;
		int typeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnTypeClass(typeSpec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operationContext ::= NAME DOUBLECOLON operationName LPAREN formalParameterList RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object opName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formParListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formParListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object formParList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OperationContextClass(n,opName,formParList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationContext",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operationContext ::= NAME DOUBLECOLON operationName LPAREN formalParameterList RPAREN COLON returnType 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object opName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int formParListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formParListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object formParList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperationContextClass(n,opName,formParList,rType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationContext",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contextDeclarationOpt ::= operationContext 
            {
              Object RESULT =null;
		int opConleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opConright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opCon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ContextDeclarationOptClass(opCon); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contextDeclarationOpt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contextDeclaration ::= CONTEXT contextDeclarationOpt 
            {
              Object RESULT =null;
		int cdoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cdo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ContextDeclarationClass(cdo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contextDeclaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stereotypeName ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stereotypeName",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stereotypeName ::= NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StereotypeNameClass(name);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stereotypeName",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stereotypeOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stereotypeOpt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stereotypeOpt ::= stereotype stereotypeName COLON oclExpression stereotypeOpt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oclEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oclEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oclE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StereotypeOptClass(s,sName,oclE,sOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stereotypeOpt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constraint ::= contextDeclaration stereotype COLON oclExpression stereotypeOpt 
            {
              Object RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oclEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oclEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oclE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstraintClass(cd,s,oclE,sOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constraint ::= contextDeclaration stereotype NAME COLON oclExpression stereotypeOpt 
            {
              Object RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object cd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oclEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oclEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oclE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sOptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sOptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sOpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstraintClass(cd,s,name,oclE,sOpt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // oclExpressions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("oclExpressions",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= oclExpressions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // oclExpressions ::= constraint oclExpressions 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oclEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oclEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oclE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OclExpressionsClass(c,oclE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oclExpressions",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

