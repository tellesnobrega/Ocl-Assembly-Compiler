import java_cup.runtime.*;
import gerador.semantico.*;
import gerador.*;
action code {:
  private AnalisadorSemantico atual = AnalisadorSemantico.getInstance();
:}

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* Terminais */
terminal 		RPAREN, LPAREN, RBRACKET, LBRACKET;
terminal 		XOR, OR, AND, NOT;
terminal 		EQ, GT, LT, GE, LE, NE;
terminal 		PLUS, MINUS;
terminal 		TIMES, DIV;
terminal 		BAG, SET, SEQUENCE, COLLECTION;
terminal 		PRE, POST;
terminal 		IF, THEN, ELSE, ENDIF;
terminal 		COLON, DOUBLECOLON, CONTEXT, COMMA, IMPLIES, DOT, ARROW, DOUBLEDOT, AT, PIPE, SEMICOLON; 
terminal String NAME, STRING, INTEGER, DOUBLE;
terminal String	TRUE, FALSE;


/* Não terminais */
non terminal 	oclExpressions, oclExpression, constraint, contextDeclaration, contextDeclarationOpt;
non terminal 	stereotype, stereotypeName, stereotypeOpt;
non terminal	operationContext, operationName;
non terminal    formalParameterList;
non terminal    returnType, typeSpecifier, simpleTypeSpecifier, collectionType, collectionKind;
non terminal    pathName; 

non terminal 	expression, multiplicativeExpression, multiplicativeExpressionOpt, logicalExpression, relationalExpression;
non terminal	additiveExpression, additiveExpressionOpt, ifExpression, primaryExpression;
non terminal 	postfixExpressionOpt, unaryExpression, postfixExpression, timeExpression;
non terminal 	collectionItemOpt, collectionItem, collectionItemOptTwo;
non terminal	paramOpt, relationalOperator, addOperator, logicalOperator, operator, multiplyOperator, unaryOperator;
non terminal    propertyCallParameters, actualParameterList, actualParameterListOpt, simpleTypeSpecifierOpt,  collectionItemExpressionOpt;
non terminal 	propertyCall, propertyOptCall, literal, literalCollection, number, boolean;


/* PrecedÃªncias */
precedence left SEMICOLON, COMMA;
precedence left XOR; 
precedence left OR; 
precedence left AND; 
precedence left NOT; 
precedence left EQ, NE, GT, LT, GE, LE, IMPLIES; 
precedence left PLUS, MINUS; 
precedence left TIMES, DIV; 
precedence left DOUBLEDOT, DOUBLECOLON, COLON, DOT, ARROW;


/* Contexto */
oclExpressions ::= constraint:c oclExpressions:oclE
                   {: RESULT = new OclExpressionsClass(c,oclE); :} 
                   | 
                   ;

constraint ::= contextDeclaration:cd  stereotype:s NAME:name COLON oclExpression:oclE stereotypeOpt:sOpt 
               {: RESULT = new ConstraintClass(cd,s,name,oclE,sOpt); :}               
	    	   | 
               contextDeclaration:cd stereotype:s COLON oclExpression:oclE stereotypeOpt:sOpt 
               {: RESULT = new ConstraintClass(cd,s,oclE,sOpt); :}  
               ;

stereotypeOpt ::= stereotype:s stereotypeName:sName COLON oclExpression:oclE stereotypeOpt:sOpt 
                  {: RESULT = new StereotypeOptClass(s,sName,oclE,sOpt); :}
                  | 
                  ;

stereotypeName ::= NAME:name
				   {: RESULT = new StereotypeNameClass(name);; :}
				   |
                   ;

contextDeclaration ::= CONTEXT contextDeclarationOpt:cdo 
                       {: RESULT = new ContextDeclarationClass(cdo); :}
                       ;

contextDeclarationOpt ::= operationContext:opCon
						  {: RESULT = new ContextDeclarationOptClass(opCon); :};  

operationContext ::= NAME:n  DOUBLECOLON operationName:opName LPAREN formalParameterList:formParList RPAREN COLON returnType:rType 
                     {: RESULT = new OperationContextClass(n,opName,formParList,rType); :}
		     		 | 
                     NAME:n DOUBLECOLON operationName:opName LPAREN formalParameterList:formParList RPAREN
		     		 {: RESULT = new OperationContextClass(n,opName,formParList); :}
                     ;

returnType ::= typeSpecifier:typeSpec
               {: RESULT = new ReturnTypeClass(typeSpec); :}
               ;

typeSpecifier ::= simpleTypeSpecifier:sTypeSpec
                  {: RESULT = new TypeSpecifierClass(sTypeSpecleft, sTypeSpecright, sTypeSpec); :} 
                  | 
                  collectionType:colType
                  {: RESULT = new TypeSpecifierClass(colTypeleft, colTyperight, colType); :} 
                  ;

simpleTypeSpecifier ::= pathName:pn
                        {: RESULT = new SimpleTypeSpecifierClass(pn); :} 
                        ;

pathName ::= NAME:name 
             {: RESULT = new PathNameClass(nameleft, nameright,name); :} 
             | 
             NAME:name DOUBLECOLON:dc pathName:pathName
             {: RESULT = new PathNameClass(name, dc,pathName); :}
             ;

collectionType ::= collectionKind:colKind LPAREN simpleTypeSpecifier:sTypeSpec RPAREN
                   {: RESULT = new CollectionTypeClass(colKind,sTypeSpec); :} 
                   ;

stereotype ::= PRE:pre
               {: RESULT = new StereotypeClass("pre"); :} 
               | 
               POST:pos 
               {: RESULT = new StereotypeClass("pos"); :} 
               ;


/* ExpressÃµes */

oclExpression ::= expression:exp
                  {: RESULT = new OclExpressionClass(exp); :} 
                  ;

expression ::= logicalExpression:logExp
               {: RESULT = new ExpressionClass(logExp); :} 
               ;

collectionKind ::= BAG:bag 
                   {: RESULT = new CollectionKindClass("Bag"); :}
                   | 
                   SET:set  
                   {: RESULT = new CollectionKindClass("Set"); :}
                   |  
                   SEQUENCE:sequence 
                   {: RESULT = new CollectionKindClass("Sequence"); :}
                   | 
                   COLLECTION:collection
                   {: RESULT = new CollectionKindClass("Collection"); :}
	           	   ;

operationName ::= NAME:name 
                  {: RESULT = new OperationNameClass(name); :}
                  | 
                  EQ:eq
                  {: RESULT = new OperationNameClass("=="); :}
                  | 
                  PLUS:plus 
                  {: RESULT = new OperationNameClass("+"); :}
                  | 
                  MINUS:minus 
                  {: RESULT = new OperationNameClass("-"); :}
                  | 
                  LT:lt 
                  {: RESULT = new OperationNameClass("<"); :}
                  | 
                  LE:le 
                  {: RESULT = new OperationNameClass("<="); :}
                  | 
                  GE:ge 
                  {: RESULT = new OperationNameClass(">="); :}
                  | 
                  GT:gt 
                  {: RESULT = new OperationNameClass(">"); :}
                  | 
                  DIV:div 
                  {: RESULT = new OperationNameClass("/"); :}
                  | 
                  TIMES:times 
                  {: RESULT = new OperationNameClass("*"); :}
                  | 
                  NE:ne 
                  {: RESULT = new OperationNameClass("!="); :}
                  | 
                  IMPLIES:implies 
                  {: RESULT = new OperationNameClass("implies"); :}
                  | 
                  NOT:not
                  {: RESULT = new OperationNameClass("not"); :}
                  | 
                  XOR:xor 
                  {: RESULT = new OperationNameClass("^"); :}
                  | 
                  AND:and
                  {: RESULT = new OperationNameClass("and"); :}
                  ;

formalParameterList ::= NAME:name COLON typeSpecifier:typeSpec paramOpt:paramOpt 
						{: RESULT = new FormalParameterListClass(name,typeSpec,paramOpt); :}
                        | 
                        ;

paramOpt ::= COMMA NAME:name COLON typeSpecifier:typeSpec paramOpt:paramOpt
             {: RESULT = new ParamOptClass(name,typeSpec,paramOpt); :}
             | 
             ;

logicalExpression ::= relationalExpression:relExp
                      {: RESULT = new LogicalExpressionClass(relExp); :} 
                      |  
	              	  relationalExpression:relExp logicalOperator:logOp logicalExpression:logExp
                      {: RESULT = new LogicalExpressionClass(relExp,logOp,logExp); :} 
                      ;

logicalOperator ::= AND:and 
		    		{: RESULT = new LogicalOperatorClass("and"); :}
                    | 
                    OR:or 
		    		{: RESULT = new LogicalOperatorClass("or"); :}
                    | 
                    XOR:xor 
		    		{: RESULT = new LogicalOperatorClass("^"); :}
                    | 
                    IMPLIES:implies
		    		{: RESULT = new LogicalOperatorClass("implies"); :}
                    ;

relationalExpression ::= additiveExpression:addExp 
			 			 {: RESULT = new RelationalExpressionClass(addExpleft,addExpright, addExp); :}
                         | 
                         additiveExpression:addExp1 relationalOperator:relOp additiveExpression:addExp2 
			 			 {: RESULT = new RelationalExpressionClass(addExp1left,addExp1right,addExp1,relOp,addExp2); :}
                         ;

relationalOperator ::= EQ:eq 
		       		   {: RESULT = new RelationalOperatorClass("=="); :}
                       | 
                       GT:gt
                       {: RESULT = new RelationalOperatorClass(">"); :}
                       | 
                       LT:lt
                       {: RESULT = new RelationalOperatorClass("<"); :}
                       | 
                       GE:ge
                       {: RESULT = new RelationalOperatorClass(">="); :}
                       | 
                       LE:le
                       {: RESULT = new RelationalOperatorClass("<="); :}
                       |
                       NE:ne
                       {: RESULT = new RelationalOperatorClass("!="); :}
                       ;

additiveExpression ::= multiplicativeExpression:multExp additiveExpressionOpt:addExpOpt
		       		   {: RESULT = new AdditiveExpressionClass(multExp,addExpOpt); :}
                       ;

additiveExpressionOpt ::= additiveExpressionOpt:addExpOpt addOperator:addOp multiplicativeExpression:multExp 
                          {: RESULT = new AdditiveExpressionOptClass(addExpOptleft, addExpOptright, addExpOpt,addOp,multExp); :}
                          | 
                          ;

addOperator ::= PLUS:plus
                {: RESULT = new AddOperatorClass("+"); :} 
                | 
                MINUS:minus
                {: RESULT = new AddOperatorClass("-"); :} 
                ;

multiplicativeExpression ::= unaryExpression:uExp multiplicativeExpressionOpt:multExpOpt
			     			 {: RESULT = new MultiplicativeExpressionClass(uExpleft, uExpright, uExp,multExpOpt); :}
                             ;

multiplicativeExpressionOpt ::= multiplicativeExpressionOpt:multExpOpt multiplyOperator:multOp unaryExpression:uExp 
 			        			{: RESULT = new MultiplicativeExpressionOptClass(multExpOpt,multOp,uExp); :}
                                | 
                                ;

unaryExpression ::= unaryOperator:uOp postfixExpression:postExp 
                    {: RESULT = new UnaryExpressionClass(uOpleft,uOpright, uOp,postExp); :}
                    | 
                    postfixExpression:postExp 
                    {: RESULT = new UnaryExpressionClass(postExp); :}
                    ;

unaryOperator ::= MINUS:minus 
		  		  {: RESULT = new UnaryOperatorClass("-"); :}
                  | 
                  NOT:not
		  		  {: RESULT = new UnaryOperatorClass("not"); :}
                  ;

multiplyOperator ::= TIMES:times
		     		 {: RESULT = new MultiplyOperatorClass("*"); :}
                     | 
                     DIV:div
		     		 {: RESULT = new MultiplyOperatorClass("/"); :}
                     ;

postfixExpression ::= primaryExpression:priExp {: atual.setContexto(priExpleft, priExpright,priExp); :} postfixExpressionOpt:postExpOpt  
				      {: RESULT = new PostfixExpressionClass(priExp,postExpOpt); :}
                      ;

postfixExpressionOpt ::= postfixExpressionOpt:postExpOpt operator:op propertyCall:proCall {: atual.setContexto(proCallleft, proCallright, proCall); :}
			 			 {: RESULT = new PostFixExpressionOptClass(postExpOpt,op,proCall); :}
                         | 
                         ;

operator ::= DOT:dot 
             {: RESULT = new OperatorClass("dot"); :}
             | 
             ARROW:arrow
             {: atual.empilhaFluxo(); RESULT = new OperatorClass("arrow"); :}
             ;

primaryExpression ::= literalCollection:litCol 
                      {: RESULT = new PrimaryExpressionClass(litColleft, litColright, litCol,"literalCollectionClass"); :}
                      | 
                      literal:lit 
                      {: RESULT = new PrimaryExpressionClass(litleft,litright,lit,"literal"); :}
                      | 
                      propertyCall:propCall 
                      {: RESULT = new PrimaryExpressionClass(propCallleft, propCallright, propCall,"propertyCall"); :}
                      | 
                      LPAREN expression:exp RPAREN 
                      {: RESULT = new PrimaryExpressionClass(expleft,expright, exp,"expression"); :}
                      | 
                      ifExpression:ifExp
                      {: RESULT = new PrimaryExpressionClass(ifExpleft,ifExpright,ifExp,"IfExpressionClass"); :}
                      ;

literalCollection ::= collectionKind:colKind LBRACKET collectionItemOpt:colItemOpt RBRACKET
                      {: RESULT = new LiteralCollectionClass(colKind,colItemOpt); :}
                      ;

collectionItemOpt ::= collectionItem:colItem1 collectionItemOptTwo:colItemOpt
                      {: RESULT = new CollectionItemClass(colItem1,colItemOpt); :} 
                      | 
                      ;

collectionItemOptTwo ::= collectionItemOptTwo:colItemOpt COMMA collectionItem:colItem 
                         {: RESULT = new CollectionItemOptTwoClass(colItemOpt,colItem); :}
                         | 
                         ;

collectionItem ::= expression:exp collectionItemExpressionOpt:colItemExpOpt 
		   		   {: RESULT = new CollectionItemClass(exp,colItemExpOpt); :}
                   ;

collectionItemExpressionOpt ::= DOUBLEDOT expression:exp 
								{: RESULT = new CollectionItemExpressionOptClass(exp); :}
                                |
                                ;

literal ::= STRING:s
            {: RESULT = new LiteralClass(s, "string"); :}
            | 
            number:n
            {: RESULT = new LiteralClass(n); :}
            |
            boolean:b
            {: RESULT = new LiteralClass(b); :}
            ;
            

propertyCall ::= pathName:pn propertyOptCall:poc	
			 	{: RESULT = new PropertyCallClass(pnleft, pnright, pn, poc); :};

propertyOptCall	::= {: atual.setContexto(); :} propertyCallParameters:pcp
				    {: atual.retrocedeContexto();RESULT = new PropertyOptCallClass(pcp); :}
					| ;

timeExpression ::= AT PRE
		   {: RESULT = new TimeExpressionClass(); :}
                   ;

actualParameterList ::= expression:exp actualParameterListOpt:actualParamListOpt
            	        {: RESULT = new ActualParameterListClass(exp,actualParamListOpt); :}
                        ;

actualParameterListOpt ::= COMMA expression:exp actualParameterListOpt:actualParamListOpt 
	                   {: RESULT = new ActualParameterListOptClass(exp,actualParamListOpt); :}
                           | 
                           ;

propertyCallParameters ::= LPAREN actualParameterList:apl RPAREN 
                           {: RESULT = new PropertyCallParametersClass(apl); :}
                           |
                           LPAREN RPAREN;

simpleTypeSpecifierOpt ::= COLON simpleTypeSpecifier:sTypeSpec 
                           {: RESULT = new SimpleTypeSpecifierOptClass(sTypeSpec); :}
                           | 
                           ;

ifExpression ::= IF expression:exp1 THEN expression:exp2 ELSE expression:exp3 ENDIF
                 {: RESULT = new IfExpressionClass(exp1,exp2,exp3); :}
                 ;

boolean	::= TRUE:t
			{: RESULT = new BooleanClass("True"); :}
			| FALSE:f
			{: RESULT = new BooleanClass("False"); :};             
			
number	::= DOUBLE:d
		    {:RESULT = new NumberClass(d, "Double"); :} 
			| INTEGER :i
			{: RESULT = new NumberClass(i, "Integer"); :};    